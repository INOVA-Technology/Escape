#!/usr/bin/env ruby

class Space
	attr_accessor :value
	def initialize
		@can_pass_though = true
	end

	def to_s
		" "
	end
end

class Player < Space
	def initialize
		super()
		@can_pass_though = false
	end

	def to_s
		"@"
	end
end

class Wall < Space
	def initialize(value)
		super()
		@value = value # one of these: - |
		@can_pass_though = false
	end

	def to_s
		@value
	end
end

class PowerUp < Space

	attr_reader :health

	def initialize(health: 0)
		super()
		@health = health
	end

	def to_s
		"^"
	end

end

class Grid

	attr_accessor :spaces

	def initialize(rows, columns)
		@rows = rows
		@columns = columns
		@spaces = []
	end

	def self.empty(rows, columns)
		a = self.new(rows, columns)
		a.rows.times do |row|
			a.columns.times do |col|
				a.spaces << Space.new
			end
		end
	end

	def self.from_map(rows, columns, map)
		a = self.new(rows, columns)
		map.chars.map do |c|
			next if c == "\n"
			a.spaces << case c
			when " "
				Space.new
			when "|", "-"
				Wall.new(c)
			when "@"
				Player.new
			when "^"
				PowerUp.new(health: 3)
			else
				raise ArgumentError, "invalid character: #{c}"
			end
		end
		a
	end

	def [](r, c = nil)
		if c
			@spaces[@columns * r + c]
		else
			@spaces[r]
		end
	end

	def find_player
		e = nil
		i = 0
		@spaces.each do |s|
			if s.is_a?(Player)
				e = i
				break
			end
			i += 1
		end
		e
	end

	def to_s
		almost_there = @spaces.each_slice(@columns).map do |row|
			row.map(&:to_s).join("")
		end
		almost_there.join("\n")
	end

end

# grid = Grid.new(3, 3)
map = <<EOT
 ----- 
|@ ^  |
|     |
|     |
 ----- 
EOT

grid = Grid.from_map(7, 7, map)

puts grid

case gets.chomp.downcase
when "u"
	p grid.find_player
when "d"
when "l"
when "r"
else
	puts "What?"
end


puts grid
puts grid[grid.find_player]


